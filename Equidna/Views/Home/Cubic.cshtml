
@{
    ViewBag.Title = "Modelo cúbico";
}

<h2>Modelo cúbico</h2>

<div> <h1 id="FormulaDisplayDiv" style="text-align: center"></h1></div>
<div class="col-xs-12 " align="center">
    <input id="number" type="number" step="0.01" onchange="updateFromNumber();" />
    <input id="number1" type="number" step="0.01" onchange="updateFromNumber();" />
    <input id="number2" type="number" step="0.01" onchange="updateFromNumber();" />
    <input id="number3" type="number" step="0.01" onchange="updateFromNumber();" />
</div>


<div class="row" onload="updateGraph()">
    <div class="col-xs-12">
        <div id="sliderBox" class="jxgbox" style="width:100%;height:100px;"></div>
        <label for="startTime">Start time: <input name="startTime" type="number" value="0" /></label>
        <label for="endTime">End time: <input name="endTime" type="number" value="9" /></label>

        <button id="start" onclick="Start()">Start</button>
    </div>
    </div>
<div class="row">
    <div class="col-xs-3">
        <div class="container">
            <div class="row clearfix">
                <div class="col-md-12 column">
                    <table class="table table-bordered table-hover" id="tab_logic">
                        <thead>
                        <tr>

                            <th class="text-center">
                                X
                            </th>
                            <th class="text-center">
                                Y
                            </th>

                        </tr>
                        </thead>
                        <tbody>
                        <tr id='addr0'>

                            <td>
                                <input type="text" name='name0' placeholder='X' class="form-control" value="0" style="text-align: center" readonly />
                            </td>
                            <td>
                                <input type="number" id="table1" step="0.01" name='mail0' placeholder='Y' style="text-align: center" class="form-control" />
                            </td>

                        </tr>
                        <tr id='addr1'></tr>
                        </tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>
    <div class="col-xs-3">
        <div class="container">
            <div class="row clearfix">
                <div class="col-md-12 column">
                    <table class="table table-bordered table-hover" id="tab_logic">
                        <thead>
                        <tr>

                            <th class="text-center">
                                X
                            </th>
                            <th class="text-center">
                                Y
                            </th>

                        </tr>
                        </thead>
                        <tbody>
                        <tr id='addr0'>

                            <td>
                                <input type="number" id="table2" step="0.01" name='name0' placeholder='X' class="form-control" style="text-align: center"   />
                            </td>
                            <td>
                                <input type="number" id="table3" step="0.01" name='mail0' placeholder='Y' style="text-align: center" class="form-control" />
                            </td>

                        </tr>
                        <tr id='addr1'></tr>
                        </tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>
    <div class="col-xs-3">
        <div class="container">
            <div class="row clearfix">
                <div class="col-md-12 column">
                    <table class="table table-bordered table-hover" id="tab_logic">
                        <thead>
                        <tr>

                            <th class="text-center">
                                X
                            </th>
                            <th class="text-center">
                                Y
                            </th>

                        </tr>
                        </thead>
                        <tbody>
                        <tr id='addr0'>

                            <td>
                                <input type="number"  id="table4" step="0.01" name='name0' placeholder='X' class="form-control" style="text-align: center" />
                            </td>
                            <td>
                                <input type="number" id="table5" step="0.01" name='mail0' placeholder='Y' style="text-align: center" class="form-control" />
                            </td>

                        </tr>
                        <tr id='addr1'></tr>
                        </tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>
<div class="col-xs-3">
    <div class="container">
        <div class="row clearfix">
            <div class="col-md-12 column">
                <table class="table table-bordered table-hover" id="tab_logic">
                    <thead>
                        <tr>

                            <th class="text-center">
                                X
                            </th>
                            <th class="text-center">
                                Y
                            </th>

                        </tr>
                    </thead>
                    <tbody>
                        <tr id='addr0'>

                            <td>
                                <input type="text" name='name0' placeholder='X' class="form-control" style="text-align: center" value="0" readonly />
                            </td>
                            <td>
                                <input type="number" id="table6" step="0.01" name='mail0' placeholder='Y' style="text-align: center" class="form-control" />
                            </td>

                        </tr>
                        <tr id='addr1'></tr>
                    </tbody>
                </table>
            </div>
        </div>

    </div>
</div>

    <div class="col-xs-6">
        <div id='VelocityBoard' class='jxgbox graphbox'  style='user-select: none; overflow: hidden; position: relative;'></div>
    </div>
<div class="col-xs-6">
    <div id='PositionBoard' class='jxgbox graphbox'  style='user-select: none; overflow: hidden; position: relative;'></div>
</div>
</div>



<script type='text/javascript'>

    var currentTime = 0;
    var interval;
    var timeInterval = 50;
    var guidingLine;
    var maxX = 9, minX = -1, maxY = 9, minY = -2;
    var startButton = document.getElementById("start");
    var numberField = document.getElementById("number");
    var numberField1 = document.getElementById("number1");
    var numberField2= document.getElementById("number2");
    var numberField3 = document.getElementById("number3");

    var numtable = document.getElementById("table1");
    var numtable2 = document.getElementById("table2");
    var numtable3 = document.getElementById("table3");
    var numtable4 = document.getElementById("table4");
    var numtable5 = document.getElementById("table5");
    var numtable6 = document.getElementById("table6");

    var value;

    var firstUpdate = true;
    //upnumber
    function updateFromNumber() {
        if (firstUpdate) {
            firstUpdate = false;
           // 
            
           
        }
    }
    //uptable
    function updateFromTable() {
        if (firstUpdate) {
            firstUpdate = false;
            


        }
    }

    function Start() {
        startButton.disabled = true;
        currentTime = parseInt(document.getElementsByName("startTime")[0].value);
        interval = window.setInterval(Step, timeInterval);
        guidingLine = positionBoard.create('line', [[currentTime, minY], [currentTime, maxY]], { straightFirst: false, straightLast: false, strokeWidth: 2 })
    }

    function Step() {
        currentTime += timeInterval / 1000;
        if (currentTime >= parseInt(document.getElementsByName("endTime")[0].value)) {
            clearInterval(interval);
            positionBoard.removeObject(guidingLine);
            startButton.disabled = false;
        }
        else {
            value = positionFunction.evaluate(currentTime);
            slider.setValue(value);
            sliderBox.update();

            positionBoard.removeObject(guidingLine);
            guidingLine = positionBoard.create('line', [[currentTime, minY], [currentTime, maxY]], { straightFirst: false, straightLast: false, strokeWidth: 2 })
        }
    }

    function SnapToGrid(x, y) {
        return [Math.round(x * 100) / 100, Math.round(y * 100) / 100]
    }

    var FormulaDiv = document.getElementById("FormulaDisplayDiv");

    var positionBoard = JXG.JSXGraph.initBoard('PositionBoard', { boundingbox: [minX, maxY, maxX, minY], axis: true, shownavigation: true, showCopyright: false});
    var velocityBoard = JXG.JSXGraph.initBoard('VelocityBoard', { boundingbox: [minX, maxY, maxX, minY], axis: true, shownavigation: true, showCopyright: false});

    var sliderBox = JXG.JSXGraph.initBoard('sliderBox', { boundingbox: [-(minY * (maxX - minX)), 5, minY * (maxX - minX), -5], axis: false, grid: true, shownavigation: true, showCopyright: false, keepAspectRatio: true });
    var urlImg = "https://vignette4.wikia.nocookie.net/kirby/images/0/01/Kirby_Artwork_Caminando_%28KA%29.png/revision/latest?cb=20100808233646";
    // var slider = sliderBox.create('slider', [urlImg,[1,1],[1,1] ]);
    var slider = sliderBox.create('slider', [[-(minY * (maxX - minX)), 0], [(minY * (maxX - minX)), 0], [(minY * (maxX - minX)), 0, -(minY * (maxX - minX))]], { ticks: { drawLabels: false, highlight: false, size: 5, opacity: 0.3 } });
    var im = sliderBox.create('image', [urlImg, [function () { return slider.X(); }, function () { return slider.Y(); }], [5, 5]]);
    // var im = sliderBox.create('image', [], [function() { return slider.X(); }], [1, 1]]);

    velocityBoard.highlightInfobox = function (x, y, el) {
        velocityBoard.infobox.setText('(' + el.X().toFixed(2) + ', ' + el.Y().toFixed(2) + ')');
    };

    positionBoard.highlightInfobox = function (x, y, el) {
        positionBoard.infobox.setText('(' + el.X().toFixed(2) + ', ' + el.Y().toFixed(2) + ')');
    };

    var positionFunction = new CubicFunction(1 / 6, -1 / 2, 1 / 2, 0);
    var velocityFunction = positionFunction.derivate();

    positionBoard.create(
        'functiongraph',
        [function (x) { return positionFunction.evaluate(x); }],
        { strokeColor: "Blue" }
        );

    velocityBoard.create(
        'functiongraph',
        [function (x) { return velocityFunction.evaluate(x); }],
        { strokeColor: "Red" }
        );

    //  Create the points.
    var quadraticAxisPoint = velocityBoard.create('point', [0, 0], { size: 2, name: "", color: "Red" });
    var quadraticIntPoint = velocityBoard.create('point', [0, 0], { size: 2, name: "", color: "Red" });
    var quadraticSlopePoint = velocityBoard.create('point', [0, 0], { size: 2, name: "", color: "Red" });
    var cubicIntPoint = positionBoard.create('point', [0, 0], { size: 2, name: "", color: "Blue" });

    //  Initial setup
    updateUI();

    //  Add functionality to points.

    var intOldY = quadraticIntPoint.Y();
    quadraticIntPoint.on('mousedrag', function () {
        var offset = quadraticIntPoint.Y() - intOldY;
        quadraticIntPoint.moveTo([0, quadraticIntPoint.Y()]);
        velocityBoard.suspendUpdate();

        quadraticSlopePoint.moveTo([quadraticSlopePoint.X(), quadraticSlopePoint.Y() + offset]);
        quadraticAxisPoint.moveTo([quadraticAxisPoint.X(), quadraticAxisPoint.Y() + offset]);

        velocityBoard.unsuspendUpdate();
        intOldY = quadraticIntPoint.Y();
        axisOldY = quadraticAxisPoint.Y();
    });

    quadraticSlopePoint.on('mousedrag', function () {
        velocityBoard.suspendUpdate();

        quadraticSlopePoint.moveTo([quadraticSlopePoint.X(), quadraticIntPoint.Y()]);
        quadraticAxisPoint.moveTo([quadraticSlopePoint.X() / 2, quadraticAxisPoint.Y()]);

        velocityBoard.unsuspendUpdate();
        axisOldX = quadraticAxisPoint.X();
    });

    var axisOldX = quadraticAxisPoint.X();
    var axisOldY = quadraticAxisPoint.Y();
    quadraticAxisPoint.on('mousedrag', function () {
        var offset = quadraticAxisPoint.X() - axisOldX;
        velocityBoard.suspendUpdate();

        quadraticAxisPoint.moveTo([quadraticAxisPoint.X(), axisOldY])
        quadraticIntPoint.moveTo([0, velocityFunction.evaluate(-offset)]);
        quadraticSlopePoint.moveTo([quadraticAxisPoint.X() * 2, velocityFunction.evaluate(-offset)]);

        velocityBoard.unsuspendUpdate();
        axisOldX = quadraticAxisPoint.X();
        intOldY = quadraticIntPoint.Y();
    });

    cubicIntPoint.on("mousedrag", function () {
        cubicIntPoint.moveTo([0, cubicIntPoint.Y()]);
    });

    //  Update function
    function updateFunction() {
        var c = quadraticIntPoint.Y();
        var h = quadraticAxisPoint.X();
        var k = quadraticAxisPoint.Y();
        var m = quadraticSlopePoint.X();
        var n = quadraticSlopePoint.Y();

        velocityFunction.c = c;
        velocityFunction.b = (m * m * (k - c) + h * h * (c - n)) / (m * h * (m - h));
        velocityFunction.a = (n - c - m * velocityFunction.b) / (m * m);
        positionFunction = velocityFunction.integrate(cubicIntPoint.Y());

        updatenumbertext();
        updateTable();
        updateUI();
    }
    //Update number
    function updatenumbertext() {
        numberField.value = Math.round(positionFunction.a * 100) / 100;
        numberField1.value = Math.round(positionFunction.b * 100) / 100;
        numberField2.value = Math.round(velocityFunction.c * 100) / 100;
        numberField3.value = Math.round(positionFunction.d * 100) / 100;
    }
    //Update table
    function updateTable() {

        numtable.value = Math.round(quadraticIntPoint.Y() * 100) / 100; 
        numtable2.value = Math.round(quadraticAxisPoint.X() * 100) / 100; 
        numtable3.value = Math.round(quadraticAxisPoint.Y() * 100) / 100;
        numtable4.value = Math.round(quadraticSlopePoint.X() * 100) / 100;
        numtable5.value = Math.round(quadraticSlopePoint.Y() * 100) / 100;
        numtable6.value = Math.round(cubicIntPoint.Y() * 100) / 100; 

    }

    //  Update UI
    function updateUI() {
        updateGraph();
        FormulaDiv.innerHTML = positionFunction.ToString();
    }

    function updateGraph() {
        var axisX = -velocityFunction.b / (2 * velocityFunction.a);
        var axisY = velocityFunction.evaluate(axisX);

        positionBoard.suspendUpdate();
        velocityBoard.suspendUpdate();

        cubicIntPoint.moveTo([0, positionFunction.d]);
        quadraticIntPoint.moveTo([0, velocityFunction.c]);
        quadraticAxisPoint.moveTo([axisX, axisY]);
        quadraticSlopePoint.moveTo([axisX * 2, velocityFunction.c]);

        velocityBoard.unsuspendUpdate();
        velocityBoard.fullUpdate();
        positionBoard.unsuspendUpdate();
        positionBoard.fullUpdate();
    }

    updateFunction();

    positionBoard.on('update', updateFunction);
    velocityBoard.on('update', updateFunction);
</script>
