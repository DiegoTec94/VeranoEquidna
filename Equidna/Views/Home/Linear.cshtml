@{
    ViewBag.Title = "Modelo lineal";
}

<h2>Modelo lineal</h2>

<div><h1 id="FormulaDisplayDiv" style="text-align: center"></h1></div>
<div class="col-xs-12" align="center">
    <input id="number2"  type="number" step="0.01" onchange="updateFromNumber();" />
    <input id="number" type="number" step="0.01" onchange="updateFromNumber();" />
</div>

<div class="row">
    
    <div class="col-xs-12">
        <div id="sliderBox" class="jxgbox" style="width: 100%; height: 100px;"></div>
        <label for="startTime">Start time: <input name="startTime" type="number" value="0"/></label>
        <label for="endTime">End time: <input name="endTime" type="number" value="9"/></label>

        <button id="start" onclick="Start()">Start</button>
    </div>
</div>


<!--<div class="row">

   
    
    
</div>
    -->

<div class="col-xs-6 col-md-offset-3">
    <div class="col-xs-2" style="color: red">
        <div class="container">
            <div class="row clearfix">
                <div class="col-md-12 column">
                    <table class="table table-bordered table-hover" id="tab_logic">
                        <thead>
                            <tr>


                                <th class="text-center">
                                    Velocidad
                                </th>

                            </tr>
                        </thead>
                        <tbody>
                            <tr id='addr0'>


                                <td>
                                    <input type="number" id="table1" step="0.01" name='mail0' placeholder='Velocidad' style="text-align: center" class="form-control" />
                                </td>

                            </tr>
                            <tr id='addr1'></tr>
                        </tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>
</div>
<div class="row">
    <div class="col-xs-5 ">
        <div id='VelocityBoard' class='jxgbox graphbox'        style='user-select: none; overflow: hidden; position: relative;'></div>
    </div>
    
    <div class="col-xs-4 ">
        <div class="container">
            <div class="row clearfix">
                <div class="col-md-2 column">
                    <table class="table table-bordered table-hover" id="tab_logic">
                        <thead>
                            <tr>

                                <th class="text-center" style="color: red">
                                    Tiempo
                                </th>
                                <th class="text-center" style="color: blue">
                                    Posición
                                </th>


                            </tr>
                        </thead>
                        <tbody>
                            <tr id='addr0'>

                                <td>
                                    <input type="number" id="x2" name='x1' step="0.01" class="form-control" style="text-align: center" readonly />
                                </td>
                                <td>
                                    <input type="number" id="y1" step="0.01" name='mail0' style="text-align: center" class="form-control" />
                                </td>

                            </tr>
                            <tr id='addr1'></tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <!--<a id="add_row" class="btn btn-default pull-left">Add Row</a><a id='delete_row' class="pull-right btn btn-default">Delete Row</a>-->
        </div>
    </div>
</div>


<div class="container">
    <div class="col-xs-5">
        <div id='PositionBoard' class='jxgbox graphbox'        style='user-select: none; overflow: hidden; position: relative;'></div>
    </div>
    <div class="col-xs-2" style="color: blue">
        <div class="container">
            <div class="row clearfix">
                <div class="col-md-12 column">
                    <table class="table table-bordered table-hover" id="tab_logic">
                        <thead>
                            <tr>

                                <th class="text-center">
                                    Posición
                                </th>


                            </tr>
                        </thead>
                        <tbody>
                            <tr id='addr0'>


                                <td>
                                    <input type="number" id="table2" step="0.01" name='mail0' placeholder='Posición ' style="text-align: center" class="form-control" />
                                </td>

                            </tr>
                            <tr id='addr1'></tr>
                        </tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>
    <div class="col-xs-4">
        <div class="container">
            <div class="row clearfix">
                <div class="col-md-2 column">
                    <table class="table table-bordered table-hover" id="tab_logic">
                        <thead>
                            <tr>

                                <th class="text-center" style="color: red">
                                    Tiempo
                                </th>
                                <th class="text-center" style="color: blue">
                                    Posición
                                </th>


                            </tr>
                        </thead>
                        <tbody>
                            <tr id='addr0'>

                                <td>
                                    <input type="number" id="x1" name='x1' step="0.01" class="form-control" style="text-align: center" />
                                </td>
                                <td>
                                    <input type="number" id="y2" step="0.01" name='mail0' style="text-align: center" class="form-control" readonly />
                                </td>

                            </tr>
                            <tr id='addr1'></tr>
                        </tbody>
                    </table>
                </div>
            </div>
            <!--<a id="add_row" class="btn btn-default pull-left">Add Row</a><a id='delete_row' class="pull-right btn btn-default">Delete Row</a>-->
        </div>
    </div>
</div>
   
    







<script type='text/javascript'>

    var currentTime = 0;
    var interval;
    var timeInterval = 50;
    var guidingLine;
    var maxX = 9, minX = -1, maxY = 5, minY = -5;
    var startButton = document.getElementById("start");
    var numberField = document.getElementById("number");
    var numberField2 = document.getElementById("number2");
    var numtable = document.getElementById("table1");
    var numtable2 = document.getElementById("table2");
    var tablax1 = document.getElementById("x1");
    var tablay1 = document.getElementById("y2");
    var tablax2 = document.getElementById("x2");
    var tablay2 = document.getElementById("y1");
    var xxx =0;
    var firstUpdate = true;
    var addrow = document.getElementById("add_row");
    var delerow = document.getElementById("delete_row");
    var value;
    function add(parameters) {

    }

    function updateFromNumber() {
        if (firstUpdate) {
            firstUpdate = false;
          //  positionFunction.a = parseFloat(numberField.value);
           // linearPoint = quadraticFunction.derivate();
            updateFunction();
        }
    }

    function updateFromTable() {
        if (firstUpdate) {
            firstUpdate = false;
            xxx = parseFloat(tablax1.value);
            updateFunction();
        }

    }
    function updateFromXY() {
        if (firstUpdate) {
            firstUpdate = false;

            updateFunction();
        }

    }

    function Start() {
        startButton.disabled = true;
        currentTime = parseInt(document.getElementsByName("startTime")[0].value);
        interval = window.setInterval(Step, timeInterval);
        guidingLine = positionBoard.create('line', [[currentTime, minY], [currentTime, maxY]], { straightFirst: false, straightLast: false, strokeWidth: 2 })
    }

    function Step() {
        currentTime += timeInterval / 400;
        if (currentTime >= parseInt(document.getElementsByName("endTime")[0].value)) {
            clearInterval(interval);
            positionBoard.removeObject(guidingLine);
            startButton.disabled = false;
        }
        else {
            value = positionFunction.evaluate(currentTime);
            slider.setValue(value);
            sliderBox.update();

            positionBoard.removeObject(guidingLine);
            guidingLine = positionBoard.create('line', [[currentTime, minY], [currentTime, maxY]], { straightFirst: false, straightLast: false, strokeWidth: 2 })
        }
    }

    function SnapToGrid(x, y) {
        return [Math.round(x * 100) / 100, Math.round(y * 100) / 100];
    }

    var FormulaDiv = document.getElementById("FormulaDisplayDiv");


    var positionBoard = JXG.JSXGraph.initBoard('PositionBoard', { boundingbox: [-2, 9, 9, -2], axis: true, grid: true, shownavigation: true, keepAspectRatio: true, showClearTraces:true });
    positionBoard.create('text', [0.5, 8, "(m)"]);
    positionBoard.create('text', [8, 0.5, "tiempo()"]);

    var velocityBoard = JXG.JSXGraph.initBoard('VelocityBoard', { boundingbox: [-2, 9, 9, -2], axis: true, grid: true, shownavigation: true, keepAspectRatio: true, showClearTraces: true });
    velocityBoard.create('text', [0.5, 8, "(m/s)"]);
    velocityBoard.create('text', [8, 0.5, "tiempo()"]);
    var sliderBox = JXG.JSXGraph.initBoard('sliderBox', { boundingbox: [-(minY * (maxX - minX)), 5, minY * (maxX - minX), -5], axis: false, shownavigation: false, showCopyright: false, keepAspectRatio: true });
    var slider = sliderBox.create('slider', [[-(minY * (maxX - minX)), 0], [(minY * (maxX - minX)), 0], [(minY * (maxX - minX)), 0, -(minY * (maxX - minX))]], { ticks: { drawLabels: false, highlight: false }, color: "Blue" });

    velocityBoard.highlightInfobox = function (x, y, el) {
        velocityBoard.infobox.setText('(' + el.X().toFixed(2) + ', ' + el.Y().toFixed(2) + ')');
    };

    positionBoard.highlightInfobox = function (x, y, el) {
        positionBoard.infobox.setText('(' + el.X().toFixed(2) + ', ' + el.Y().toFixed(2) + ')');
    };

    var positionFunction = new LinearFunction(1, 0);
    var velocityFunction = positionFunction.derivate();

    positionBoard.create(
        'functiongraph',
        [function (x) { return positionFunction.evaluate(x); }],
        { strokeColor: "Blue" }
        );

    velocityBoard.create(
        'functiongraph',
        [function (x) { return velocityFunction.evaluate(x); }],
        { strokeColor: "Red" }
        );

    linearPoint = positionBoard.create('point', [0, 0], { size: 2, name: "", color: "Blue" });
    linearPoint.on(
        'drag',
        function () { linearPoint.moveTo([0, linearPoint.Y()]) }
        );

    constantPoint = velocityBoard.create('point', [0, positionFunction.a], { size: 2, name: "", color: "Red" });
    constantPoint.on(
        'drag',
        function () { constantPoint.moveTo([0, constantPoint.Y()]) }
        );

    function updateFunction() {

        velocityFunction.a = constantPoint.Y();
        positionFunction = velocityFunction.integrate(linearPoint.Y());
        //form
        updateform();
        //form2
        updateform2();
        //input
        updatenumerfield();
        //table
        updatetablenum();
        //text html
        updateformhtml();
        positionBoard.update();
    }


    function updatenumerfield() {
        numberField2.value = velocityFunction.a;
        numberField.value = positionFunction.b;
        numberField2.value = Math.round(numberField2.value * 100) / 100;
        numberField.value = Math.round(numberField.value * 100) / 100;
    }

    function updatetablenum() {
        numtable.value = velocityFunction.a;
        numtable2.value = positionFunction.b;
        numtable.value = Math.round(numtable.value * 100) / 100;
        numtable2.value = Math.round(numtable2.value * 100) / 100;
    }
    function updateform(parameters) {

        tablay1.value = parseFloat(numtable2.value) + parseFloat(numtable.value * tablax1.value);
        positionBoard.create('point', [tablax1.value, tablay1.value], { size: 2, name: "", color: "Red" });
        tablay1.value = null;
        tablax1.value = null;

    }
    function updateform2(parameters) {
      

        tablax2.value = ((parseFloat(tablay2.value) - parseFloat(numtable2.value)) / parseFloat(numtable.value));
        var posi = positionBoard.create('point', [tablax2.value, tablay2.value], { size: 2, name: "", color: "Red" });
        tablay2.value = null;
        tablax2.value = null;
       // posi.visible(false);
    }

    function updateformhtml(parameters) {
        FormulaDiv.innerHTML = positionFunction.ToString();
    }
    updateFunction();
    positionBoard.on('update', updateFunction);
    velocityBoard.on('update', updateFunction);
</script>
