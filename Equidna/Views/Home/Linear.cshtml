@{
    ViewBag.Title = "Modelo lineal";
}

<h2>Modelo lineal</h2>
<div id="FormulaDisplayDiv"></div>
<div class="row">
    <div class="col-xs-12">
        <div id="sliderBox" class="jxgbox" style="width:100%;height:100px;"></div>
        <label for="startTime">Start time: <input name="startTime" type="number" value="0" /></label>
        <label for="endTime">End time: <input name="endTime" type="number" value="9" /></label>

        <button id="start" onclick="Start()">Start</button>
    </div>

    <div class="col-xs-6">
        <div id='VelocityBoard' class='jxgbox' style='width:100%; padding-bottom:100%'></div>
    </div>
    <div class="col-xs-6">
        <div id='PositionBoard' class='jxgbox' style='width:100%; padding-bottom:100%'></div>
    </div>
</div>

<script type='text/javascript'>

    var currentTime = 0;
    var interval;
    var timeInterval = 50;
    var guidingLine;
    var maxX = 9, minX = -1, maxY = 5, minY = -5;
    var startButton = document.getElementById("start");

    function Start() {
        startButton.disabled = true;
        currentTime = parseInt(document.getElementsByName("startTime")[0].value);
        interval = window.setInterval(Step, timeInterval);
        guidingLine = quadraticBoard.create('line', [[currentTime, minY], [currentTime, maxY]], { straightFirst: false, straightLast: false, strokeWidth: 2 })
    }

    function Step() {
        currentTime += timeInterval / 1000;
        if (currentTime >= parseInt(document.getElementsByName("endTime")[0].value)) {
            clearInterval(interval);
            quadraticBoard.removeObject(guidingLine);
            startButton.disabled = false;
        }
        else {
            value = quadraticFunction.evaluate(currentTime);
            slider.setValue(value);
            sliderBox.update();

            quadraticBoard.removeObject(guidingLine);
            guidingLine = quadraticBoard.create('line', [[currentTime, minY], [currentTime, maxY]], { straightFirst: false, straightLast: false, strokeWidth: 2 })
        }
    }

    function SnapToGrid(x, y) {
        return [Math.round(x * 100) / 100, Math.round(y * 100) / 100]
    }

    var FormulaDiv = document.getElementById("FormulaDisplayDiv");

    var positionBoard = JXG.JSXGraph.initBoard('PositionBoard', { boundingbox: [minX, maxY, maxX, minY], axis: true, shownavigation: false, showCopyright: false});
    var velocityBoard = JXG.JSXGraph.initBoard('VelocityBoard', { boundingbox: [minX, maxY, maxX, minY], axis: true, shownavigation: false, showCopyright: false});

    var sliderBox = JXG.JSXGraph.initBoard('sliderBox', { boundingbox: [-(minY * (maxX - minX)), 5, minY * (maxX - minX), -5], axis: false, shownavigation: false, showCopyright: false, keepAspectRatio: true });
    var slider = sliderBox.create('slider', [[-(minY * (maxX - minX)), 0], [(minY * (maxX - minX)), 0], [(minY * (maxX - minX)), 0, -(minY * (maxX - minX))]], { ticks: { drawLabels: false, highlight: false }, color: "Blue" });

    velocityBoard.highlightInfobox = function (x, y, el) {
        velocityBoard.infobox.setText('(' + el.X().toFixed(2) + ', ' + el.Y().toFixed(2) + ')');
    };

    positionBoard.highlightInfobox = function (x, y, el) {
        positionBoard.infobox.setText('(' + el.X().toFixed(2) + ', ' + el.Y().toFixed(2) + ')');
    };

    var positionFunction = new LinearFunction(1, 0);
    var velocityFunction = positionFunction.derivate();

    positionBoard.create(
        'functiongraph',
        [function (x) { return positionFunction.evaluate(x); }],
        { strokeColor: "Blue" }
        );

    velocityBoard.create(
        'functiongraph',
        [function (x) { return velocityFunction.evaluate(x); }],
        { strokeColor: "Red" }
        );

    linearPoint = positionBoard.create('point', [0, 0], { size: 2, name: "", color: "Blue" });
    linearPoint.on(
        'drag',
        function () { linearPoint.moveTo([0, linearPoint.Y()]) }
        );

    constantPoint = velocityBoard.create('point', [0, positionFunction.a], { size: 2, name: "", color: "Red" });
    constantPoint.on(
        'drag',
        function () { constantPoint.moveTo([0, constantPoint.Y()]) }
        );

    function updateFunction() {
        velocityFunction.a = constantPoint.Y();
        positionFunction = velocityFunction.integrate(linearPoint.Y());
        FormulaDiv.innerHTML = positionFunction.ToString();

        positionBoard.update();
    }

    updateFunction();
    positionBoard.on('update', updateFunction);
    velocityBoard.on('update', updateFunction);
</script>
