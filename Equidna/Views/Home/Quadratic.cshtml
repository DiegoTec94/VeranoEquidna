@{
    ViewBag.Title = "Modelo cuadrático (Sin decimales)";
}

<h2>Modelo cuadrático</h2>
<div><h1 id="FormulaDisplayDiv" style="text-align: center"> </h1></div>
<div class="col-xs-12 " align="center">
    <input id="number3" type="number" step="0.01" onchange="updateFromNumber();" />
    <input id="number2" type="number" step="0.01" onchange="updateFromNumber();" />
    <input id="number" type="number" step="0.01" onchange="updateFromNumber();" />
</div>

<div class="row">
    <div class="col-xs-12">
        <div id="sliderBox" class="jxgbox" style="width:100%;height:100px;"></div>
        <label for="startTime">Start time: <input name="startTime" type="number" value="0" /></label>
        <label for="endTime">End time: <input name="endTime" type="number" value="9" /></label>

        <button id="start" onclick="Start()">Start</button>
    </div>
   </div>
<div class="row">
    <div class="col-xs-4">
        <div class="container">
            <div class="row clearfix">
                <div class="col-md-12 column">
                    <table class="table table-bordered table-hover" id="tab_logic">
                        <thead>
                            <tr>

                                <th class="text-center">
                                    X
                                </th>
                                <th class="text-center">
                                    Y
                                </th>

                            </tr>
                        </thead>
                        <tbody>
                            <tr id='addr0'>

                                <td>
                                    <input type="text" name='name0' placeholder='X' class="form-control" value="0" style="text-align: center" readonly />
                                </td>
                                <td>
                                    <input type="number" id="table1" step="0.01" name='mail0' placeholder='Y' style="text-align: center" class="form-control" />
                                </td>

                            </tr>
                            <tr id='addr1'></tr>
                        </tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>
    <div class="col-xs-4">
        <div class="container">
            <div class="row clearfix">
                <div class="col-md-12 column">
                    <table class="table table-bordered table-hover" id="tab_logic">
                        <thead>
                            <tr>

                                <th class="text-center">
                                    X
                                </th>
                                <th class="text-center">
                                    Y
                                </th>

                            </tr>
                        </thead>
                        <tbody>
                            <tr id='addr0'>

                                <td>
                                    <input type="text" name='name0' placeholder='X' class="form-control" style="text-align: center" value="1" readonly />
                                </td>
                                <td>
                                    <input type="number" id="table2" step="0.01" name='mail0' placeholder='Y' style="text-align: center" class="form-control" />
                                </td>

                            </tr>
                            <tr id='addr1'></tr>
                        </tbody>
                    </table>
                </div>
            </div>

        </div>
    </div><div class="col-xs-4">
        <div class="container">
            <div class="row clearfix">
                <div class="col-md-12 column">
                    <table class="table table-bordered table-hover" id="tab_logic">
                        <thead>
                            <tr>

                                <th class="text-center">
                                    X
                                </th>
                                <th class="text-center">
                                    Y
                                </th>

                            </tr>
                        </thead>
                        <tbody>
                            <tr id='addr0'>

                                <td>
                                    <input type="text" name='name0' placeholder='X' class="form-control" style="text-align: center" value="0" readonly />
                                </td>
                                <td>
                                    <input type="number" id="table3" step="0.01" name='mail0' placeholder='Y' style="text-align: center" class="form-control" />
                                </td>

                            </tr>
                            <tr id='addr1'></tr>
                        </tbody>
                    </table>
                </div>
            </div>

        </div>
    </div>

    <div class="col-xs-6">
        <div id='VelocityBoard' class='jxgbox graphbox' style='user-select: none; overflow: hidden; position: relative;'></div>
    </div>
    <div class="col-xs-6">
        <div id='PositionBoard' class='jxgbox graphbox' style='user-select: none; overflow: hidden; position: relative;'></div>
    </div>
</div>

<script type='text/javascript'>

    var currentTime = 0;
    var interval;
    var timeInterval = 50;
    var guidingLine;
    var maxX = 9, minX = -1, maxY = 9, minY = -2;
    var startButton = document.getElementById("start");
    var numberField = document.getElementById("number");
    var numberField2 = document.getElementById("number2");
    var numberField3 = document.getElementById("number3");
    var numtable = document.getElementById("table1");
    var numtable2 = document.getElementById("table2");
    var numtable3 = document.getElementById("table3");
    var value;



    var firstUpdate = true;
    //UpInput
    function updateFromNumber() {
        if (firstUpdate) {
            firstUpdate = false;
            quadraticFunction.a = parseFloat(numberField3.value);
            quadraticFunction.c = parseFloat(numberField.value);
            quadraticFunction.b = parseFloat(numberField2.value);
            linearFunction = quadraticFunction.derivate();
            updateAll();
        }
    }
    //UpTable

   function updateFromTable() {
        if (firstUpdate) {
            firstUpdate = false;


            




        }
    }

    function Start()
    {
        startButton.disabled = true;
        currentTime = parseInt(document.getElementsByName("startTime")[0].value);
        interval = window.setInterval(Step, timeInterval);
        guidingLine = quadraticBoard.create('line', [[currentTime, minY], [currentTime, maxY]], { straightFirst: false, straightLast: false, strokeWidth: 2 })
    }

    function Step()
    {
        currentTime += timeInterval / 1000;
        
        if (currentTime >= parseInt(document.getElementsByName("endTime")[0].value))
        {
            clearInterval(interval);
            quadraticBoard.removeObject(guidingLine);
            startButton.disabled = false;
        }
        else
        {
            value = quadraticFunction.evaluate(currentTime);
            slider.setValue(value);
            sliderBox.update();

            quadraticBoard.removeObject(guidingLine);
            guidingLine = quadraticBoard.create('line',
                [[currentTime, minY], [currentTime, maxY]],
                { straightFirst: false, straightLast: false, strokeWidth: 2 });

        }
    }

    var quadraticFunction = new QuadraticFunction(0.5, 0, 0);
    var linearFunction = new LinearFunction(1, 0);

    var FormulaDiv = document.getElementById("FormulaDisplayDiv");

    var quadraticBoard = JXG.JSXGraph.initBoard('PositionBoard', {
        boundingbox: [minX, maxY, maxX, minY],
        axis: true,
        grid: true,
        shownavigation: true,
        keepAspectRatio: true,
        showClearTraces: true,
        keepaspectratio: false, zoom: {
            factorX: 1.25,
            factorY: 1.25,
            wheel: true,
            needshift: true,
            eps: 0.1
        }
    });
    var linearBoard = JXG.JSXGraph.initBoard('VelocityBoard', {
        boundingbox: [minX, maxY, maxX, minY], axis: true,
        grid: true,
        shownavigation: true,
        keepAspectRatio: true,
        showClearTraces: true,
        keepaspectratio: false, zoom: {
            factorX: 1.25,
            factorY: 1.25,
            wheel: true,
            needshift: true,
            eps: 0.1
        }
    });

    var sliderBox = JXG.JSXGraph.initBoard('sliderBox', { boundingbox: [-(minY * (maxX - minX)), 5, minY * (maxX - minX), -5], axis: false, grid: true, shownavigation: true, showCopyright: false, keepAspectRatio: true });
    var urlImg = "https://vignette4.wikia.nocookie.net/kirby/images/0/01/Kirby_Artwork_Caminando_%28KA%29.png/revision/latest?cb=20100808233646";
    // var slider = sliderBox.create('slider', [urlImg,[1,1],[1,1] ]);
    var slider = sliderBox.create('slider', [[-(minY * (maxX - minX)), 0], [(minY * (maxX - minX)), 0], [(minY * (maxX - minX)), 0, -(minY * (maxX - minX))]], { ticks: { drawLabels: false, highlight: false, size: 5, opacity: 0.3 } });
    var im = sliderBox.create('image', [urlImg, [function () { return slider.X(); }, function () { return slider.Y(); }], [5, 5]]);
    // var im = sliderBox.create('image', [], [function() { return slider.X(); }], [1, 1]]);

    function SnapToGrid(x,y) {
        return [Math.round(x * 100) / 100, Math.round(y * 100) / 100];
    }

    quadraticPoint = quadraticBoard.create('point', [0, 0], { size: 2, name: "", color: "Blue" });
    linearIntPoint = linearBoard.create('point', [0, 0], { size: 2, name: "", color: "Red" });
    linearSlopePoint = linearBoard.create('point', [1, 1], { size: 2, name: "", color: "Red" });

    linearBoard.highlightInfobox = function (x, y, el) {
        linearBoard.infobox.setText('(' + el.X().toFixed(2) + ', ' + el.Y().toFixed(2) + ')');
    };

    quadraticBoard.highlightInfobox = function (x, y, el) {
        quadraticBoard.infobox.setText('(' + el.X().toFixed(2) + ', ' + el.Y().toFixed(2) + ')');
    };

    quadraticPoint.on(
        'drag',
        function() { quadraticPoint.moveTo(SnapToGrid( 0, quadraticPoint.Y())) }
        );

    var offset = 1;

    linearIntPoint.on(
        'drag',
        function() {
            linearSlopePoint.moveTo(SnapToGrid(linearSlopePoint.X(), linearIntPoint.Y() + offset));
            linearIntPoint.moveTo(SnapToGrid( 0, linearIntPoint.Y() )); }
        );

    linearSlopePoint.on(
        'drag',
        function () {
            linearSlopePoint.moveTo(SnapToGrid(linearSlopePoint.X(),linearSlopePoint.Y()));
            offset = linearSlopePoint.Y() - linearIntPoint.Y();}
        );

    quadraticBoard.create(
        'functiongraph',
        [function (x) {return quadraticFunction.evaluate(x);}],
        {strokeColor: "Blue"}
        );

    linearBoard.create(
        'functiongraph',
        [function (x) {return linearFunction.evaluate(x);}],
        {strokeColor: "Red"}
        );

    function updateFunctionFromGraph() {
        if (firstUpdate) {
            firstUpdate = false;
            linearFunction.a = (linearSlopePoint.Y() - linearIntPoint.Y()) / linearSlopePoint.X();
            linearFunction.b = linearIntPoint.Y();
            quadraticFunction = linearFunction.integrate(quadraticPoint.Y());

            updateAll();
        }
    }

    function updateAll() {
        updateGraphs();
        updateFields();
        updateText();
      updateTable();
        firstUpdate = true;
    }


   function updateTable() {
       numtable.value = linearIntPoint.Y();
       numtable2.value = linearSlopePoint.Y();
       numtable3.value = quadraticPoint.Y();
   }
    
    function updateFields() {
        numberField3.value = quadraticFunction.a;
        numberField.value = quadraticFunction.c;
        numberField2.value = quadraticFunction.b;
        numberField3.value = Math.round(numberField3.value * 100) / 100;
        numberField.value = Math.round(numberField.value * 100) / 100;
        numberField2.value = Math.round(numberField2.value * 100) / 100;
    }

    function updateText() {
        FormulaDiv.innerHTML = quadraticFunction.ToString();
    }

    function updateGraphs() {
        quadraticBoard.suspendUpdate();
        linearBoard.suspendUpdate();
        quadraticPoint.moveTo(SnapToGrid(0, quadraticFunction.c));
        linearIntPoint.moveTo(SnapToGrid(0, linearFunction.b));
        linearSlopePoint.moveTo(SnapToGrid(1, linearFunction.evaluate(1)));
        quadraticBoard.unsuspendUpdate();
        linearBoard.unsuspendUpdate();
    }

    updateFunctionFromGraph();
    quadraticBoard.on('update', updateFunctionFromGraph);
    linearBoard.on('update', updateFunctionFromGraph);
</script>



